"""Report File Parser

This file contains functions related to parsing reports generated by SOAP as 
    specified in `orb_builder`.
"""

import orb_parser as op
import os_utils as osu

import numpy as np
import portion as P

from itertools import combinations
from datetime import datetime
from pathlib import Path

import os
import logging

logger = logging.getLogger("report_parser")
logger.setLevel(logging.WARNING)
# logging.basicConfig(level=logging.DEBUG)
logging.basicConfig(level=logging.WARN)

base_path = Path(__file__).parent.parent

def contact_analysis_parser_v14(content: str) -> list[dict]:
    """
    This function takes in the content of a contact analysis csv output
        from SOAP version 14 and returns a list of contacts.
    """
    logger.info("Running `contact_analysis_parser_v14`")

    return contact_plan

def contact_analysis_parser_v15(content: str) -> list[dict]:
    """
    This function takes in the text of a contact analysis csv output
        from SOAP version 15 and returns a list of contacts.

    Parameters
    ----------
    content : str
        This is the text of the contact analysis csv file.

    Returns
    -------
    list[dict]
        This is a list of contacts. Each contact is a dictionary with four 
            keys : link, source, target and connections. 
            
            `link` is the name of the link usually "{source} - {target}",
            `source` is the name of the source platform,
            `target` is the name of the target platform,
            `connections` is a list of rist-set times for this link.
    """
    logger.info("Running `contact_analysis_parser_v15`")

    # special case ()
    content = content.replace(" sees ", " - ")

    content = content.split("Analysis,")[1]
    lines = content.split("\n")[2:-1]

    connections_dict = {}
    for line in lines:
        entries = line.split(",")
        link = entries[0]

        connection = {
            "rise" : float(entries[1]),
            "set" : float(entries[2]),
            "duration" : float(entries[3])
        }

        connections_dict.setdefault(link, []).append(connection)

    contact_plan = []
    for link, connections in connections_dict.items():
        source, target = link.split(" - ")
        contact = {
            "link" : link,
            "source" : source,
            "target" : target,
            "connections" : connections
        }
        contact_plan.append(contact)

    return contact_plan

# TODO : check if filepath is str type or path
def contact_analysis_parser(filepath: str | os.PathLike) -> list[dict]:
    """
    Main function used to parse a contact analysis csv output from SOAP.
        It takes in a csv from soap v14 or v15 and parses it appropriately.

    Parameters
    ----------
    filepath : str | os.PathLike
        This is the filepath for the contact analysis report in `.csv` format.

    Returns
    -------
    list[dict]
        This is a list of contacts. Each contact is a dictionary with four 
            keys : link, source, target and connections. 
            
            `link` is the name of the link usually "{source} - {target}",
            `source` is the name of the source platform,
            `target` is the name of the target platform,
            `connections` is a list of rist-set times for this link.
    """
    logger.info(f"Running `contact_analysis_parser` on `{filepath}`")

    content = osu.read_file(filepath)

    # check which version of soap generated it
    #   v14 reports begin with a new line; v15 don't. 
    #   if any updates are made this will have to be updated.
    if content[0] == "\n":
        contact_plan = contact_analysis_parser_v14(content)
    else:
        contact_plan = contact_analysis_parser_v15(content)

    return contact_plan

def parse_contact_analysis_time(filepath: str | os.PathLike) -> tuple[datetime]:
    """
    This function extracts the start end end times of a simulation from a 
        given contact analysis report.

    Parameters
    ----------
    filepath : str | os.PathLike
        This is the filepath for the contact analysis report in `.csv` format.

    Returns
    -------
    start, stop : (datetime, datetime)
        These are the starting and stopping times of the simulation as a 
            datetime object.
    """
    logger.info(f"Running `parse_contact_analysis_time` on `{filepath}`")

    content = osu.read_file(filepath)

    line = content[(i := content.find("Start")):content.find("\n", i)]
    start, stop = line.split(",")[0:2]
    start, stop = start[7:-3], stop[7:-3]

    start = datetime.strptime(start, "%Y/%m/%d %H:%M:%S")
    stop = datetime.strptime(stop, "%Y/%m/%d %H:%M:%S")

    return start, stop



if __name__ == "__main__":
    filepath = base_path / "outputs/test Contact Analysis.csv"
    contact_plan = contact_analysis_parser(filepath)
    start, stop = parse_contact_analysis_time(filepath)